# Place this in .github/workflows/ci.yml

name: CI Pipeline with MCP PR Review

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    # Customize these steps for your specific language/stack
    steps:
    - uses: actions/checkout@v3
    
    # Example for Node.js projects - replace with your language's setup
    - name: Setup Environment
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    # Replace these with your own build steps
    - run: npm ci   # For Node.js - change for your language
    - run: npm run lint   # Optional
    - run: npm test   # Change to your test command
    
  pr-review:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: |
        cd src
        npm install
    
    - name: Run PR Review with MCP
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        cd src
        # Get PR data
        PR_NUMBER=${{ github.event.pull_request.number }}
        REPO_NAME=${{ github.repository }}
        REPO_OWNER=$(echo "$REPO_NAME" | cut -d '/' -f 1)
        REPO_NAME=$(echo "$REPO_NAME" | cut -d '/' -f 2)
        
        # Get PR details
        PR_DATA=$(node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          
          async function getPRData() {
            // Get PR details
            const pr = await octokit.pulls.get({
              owner: '$REPO_OWNER',
              repo: '$REPO_NAME',
              pull_number: $PR_NUMBER
            });
            
            // Get PR files
            const files = await octokit.pulls.listFiles({
              owner: '$REPO_OWNER',
              repo: '$REPO_NAME',
              pull_number: $PR_NUMBER,
              per_page: 100
            });
            
            // Get PR comments
            const comments = await octokit.issues.listComments({
              owner: '$REPO_OWNER',
              repo: '$REPO_NAME',
              issue_number: $PR_NUMBER
            });
            
            // Get PR review comments
            const reviewComments = await octokit.pulls.listReviewComments({
              owner: '$REPO_OWNER',
              repo: '$REPO_NAME',
              pull_number: $PR_NUMBER
            });
            
            // Build PR data payload (similar to the webhook payload)
            const prData = {
              id: pr.data.id,
              number: pr.data.number,
              title: pr.data.title,
              body: pr.data.body,
              state: pr.data.state,
              created_at: pr.data.created_at,
              updated_at: pr.data.updated_at,
              repository: {
                name: '$REPO_NAME',
                owner: '$REPO_OWNER'
              },
              head: {
                ref: pr.data.head.ref,
                sha: pr.data.head.sha
              },
              base: {
                ref: pr.data.base.ref,
                sha: pr.data.base.sha
              },
              user: {
                login: pr.data.user.login,
                id: pr.data.user.id
              },
              changed_files: files.data.map(file => ({
                filename: file.filename,
                status: file.status,
                additions: file.additions,
                deletions: file.deletions,
                changes: file.changes,
                patch: file.patch
              })),
              comments: comments.data.map(comment => ({
                id: comment.id,
                body: comment.body,
                user: comment.user.login,
                created_at: comment.created_at
              })),
              review_comments: reviewComments.data.map(comment => ({
                id: comment.id,
                body: comment.body,
                user: comment.user.login,
                path: comment.path,
                position: comment.position,
                created_at: comment.created_at
              }))
            };
            
            console.log(JSON.stringify(prData));
          }
          
          getPRData().catch(console.error);
        ")
        
        # Run the MCP PR review
        echo "$PR_DATA" | node index.js